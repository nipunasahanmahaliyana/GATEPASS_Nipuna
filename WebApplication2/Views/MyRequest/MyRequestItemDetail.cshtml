<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>


<style>
    .imgContainer {
        margin-top: 25px;
    }
</style>

<div class="container">
    <h1 class="custom-font" style="font-size: 28px;">My Items Details</h1>
</div>

<br />

<div class="card">
    <div class="card-body">
        <h5 class="card-title custom-font">Ref. No: @Model[0].Request_ref_no</h5>
        @{
           
        var base64String = "";
        }

        @foreach (var item in Model)
        {
         
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="col-4">
                            Item ID
                        </div>
                        <div class="col">
                            : @item.Item_id
                            
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-4">
                            Item Serial No
                        </div>
                        <div class="col">
                            : @item.Item_serial_no
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-4">
                            Item Name
                        </div>
                        <div class="col">
                            : @item.Item_name
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-4">
                            Item Description
                        </div>
                        <div class="col">
                            : @item.Item_Description
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-4">
                            Item Quantity
                        </div>
                        <div class="col">
                            : @item.Item_Quantity
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-4">
                            Item Returnable status
                        </div>
                        <div class="col">
                            : @(item.Returnable_status)
                        </div>
                    </div>


                    <div class="container  p-0 imgContainer">
                        <div>
                            <button type="button" class="btn btn-primary btn-sm" onclick="toggleItemPhotosForm(@item.Item_id)">View Item Images</button>
                        </div>
                    </div>

                    <div>
                        <br>
                    </div>
                   
                    <div class="container">
                        <form id="itemPhotosForm-@item.Item_id" style="display:none">
                            <div class="form-group">
                                @if (item.Attaches != null && item.Attaches.Length > 0)
                                {
                                    <p>Image Data Found</p>
                                     base64String = Convert.ToBase64String(item.Attaches);
                                    <img src="data:image;base64,@base64String" style="max-width: 35%;" />
                                }
                                else
                                {
                                    <p>No image available</p>
                                }
                            </div>

                        </form>
                        <div class="m-2 float-end">
                            <a asp-action="MyRequest"><button class="btn btn-sm text-decoration-none btn-secondary">Back to List</button></a>
                        </div>
                    </div>
                    <!--Print-->
                    <div class="mt-3">
                        <button type="button" class="btn btn-success btn-sm" onclick="generatePdf('@Model[0].Request_ref_no','@item.Item_id', '@item.Item_serial_no', '@item.Item_name', '@item.Item_Description','@item.Item_Quantity', '@item.Returnable_status','@base64String')">Generate PDF</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<script>
    function toggleItemPhotosForm(itemId) {
        const itemPhotosForm = document.getElementById(`itemPhotosForm-${itemId}`);
        if (itemPhotosForm.style.display === "none" || itemPhotosForm.style.display === "") {
            itemPhotosForm.style.display = "block";
        } else {
            itemPhotosForm.style.display = "none";
        }
    }
    //Generate pdf dcoument
    async function generatePdf(request_ref_no, itemId, serialNo, name, description, itemquantity, returnableStatus, base64String) {
        const { jsPDF } = window.jspdf;

        // Load Poppins Font
        const fontUrl = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/fonts/fontawesome-webfont.woff';
        const font = await fetch(fontUrl).then(response => response.arrayBuffer());

        const doc = new jsPDF();

        // Add Poppins font
        doc.addFileToVFS("Poppins-Regular.ttf", font);
        doc.addFont("Poppins-Regular.ttf", "Poppins", "normal");
        doc.setFont("Poppins");

        // Title
        doc.setFontSize(20);
        doc.setTextColor(0, 0, 128); // Navy blue
        doc.setFont("Poppins", "bold");
        doc.text('SLT Gate Pass Item Details Document', 35, 38);

        // Item Details in Table Format
        doc.setFontSize(12);
        doc.setTextColor(0, 0, 0);

        const details = [
            ['Request Reference No', request_ref_no],
            ['Item ID', itemId],
            ['Item Serial No', serialNo],
            ['Item Name', name],
            ['Item Description', description],
            ['Item Quantity', itemquantity],
            ['Item Returnable Status', returnableStatus]
        ];

        let startY = 50; // Adjusted starting Y position for the table

        const cellWidth = 90; // Adjusted cell width for better centering
        const cellHeight = 8; // Reduced cell height
        const tableStartX = (doc.internal.pageSize.getWidth() - (cellWidth * 2)) / 2; // Center the table

        details.forEach(([label, value], index) => {
            doc.text(label, tableStartX + 2, startY + 6 + (index * cellHeight));
            doc.text(value, tableStartX + cellWidth + 2, startY + 6 + (index * cellHeight));
        });

        // If image data is available, add it to the PDF
        if (base64String) {
            const itemImg = new Image();
            itemImg.src = `data:image/jpeg;base64,${base64String}`;
            await itemImg.decode(); // Wait for the image to load
            doc.addImage(itemImg, 'JPEG', (doc.internal.pageSize.getWidth() - 80) / 2, startY + details.length * cellHeight + 10, 80, 80); // Adjusted image size and centered
        }

        // Add line above footer
        const lineY = 280; // Adjust Y position as needed
        doc.setLineWidth(0.5);
        doc.line(10, lineY, doc.internal.pageSize.getWidth() - 10, lineY);

        // Footer
        doc.setFontSize(10);
        doc.setTextColor(100, 100, 100);
        doc.text('Generated by SLT System', 10, lineY + 10);

        doc.save(`ItemDetails_${request_ref_no}.pdf`);
    }

</script>

